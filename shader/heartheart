#ifdef GL_ES
precision mediump float;
#endif
#define PI 3.14159265358979323846

vec2 random2( vec2 p ) {
    return fract(sin(vec2(dot(p,vec2(127.1,311.7)),dot(p,vec2(269.5,183.3))))*43758.5453);
}

vec3 hsb2rgb( in vec3 c ){
    vec3 rgb = clamp(abs(mod(c.x*6.0+vec3(0.0,4.0,2.0),
                             6.0)-3.0)-1.0,
                     0.0,
                     1.0 );
    rgb = rgb*rgb*(3.0-2.0*rgb);
    return c.z * mix( vec3(1.0), rgb, c.y);
}

void main() {
   vec2 st = gl_FragCoord.xy/u_resolution;
   vec2 p = 2.0*st - vec2(1.0);
   p.y -= 0.25;

   st *= 3. + 0.15*u_time;

   // animate
   p *= vec2(0.9,1.1);

   vec2 i_st = floor(st);
   vec2 f_st = fract(st);

   vec3 bcol = vec3(0.0);

   float m_dist = 1.;

   for (int y= -1; y <= 1; y++) {
        for (int x= -1; x <= 1; x++) {
            vec2 neighbor = vec2(float(x),float(y));
            vec2 point = random2(i_st + neighbor);
            point = 0.1 + 0.3*sin(u_time*10.5 + 6.2831*point);
            vec2 diff = neighbor + point - f_st;
            float dist = length(diff);
            m_dist = min(m_dist, dist);
        }
    }

   // shape
   float a = atan(p.x,p.y)/PI;
   float r = length(p);
   float h = abs(a);
   float d = (13.0*h - 22.0*h*h + 10.0*h*h*h)/(6.0-5.0*h);

   // color
   float s = 1.0-0.5*clamp(r/d,0.0,1.0);
   s = 0.75 + 0.75*p.x;
   s *= 1.0-0.25*r;
   s = 0.5 + 0.6*s;
   s *= 0.9+0.5*pow( 1.0-clamp(r/d, 0.0, 1.0 ), 0.1 );

   vec3 hcol = vec3(2.9*r,0.1*s,0.3*s)*r*1.5;
   hcol += m_dist;

   vec3 col = mix( bcol, hcol, smoothstep( -0.2, 0.8, d-r) );

   gl_FragColor = vec4(col,1.0);
}
